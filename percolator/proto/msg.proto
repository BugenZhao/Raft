// Protocol buffers are a flexible, efficient, automated mechanism for
// serializing structured data. You can define how you want your data to be
// structured. Details can be found in
// https://developers.google.com/protocol-buffers/docs/proto3.

// Once you have defined the message, the `build.rs` will generate the
// corresponding data structure in `OUT_DIR`. You can use the structure by
// importing the `msg` module. Example: use crate::msg::CommitRequest;

syntax = "proto3";

package msg;

message TimestampRequest {}

message TimestampResponse { uint64 ts = 1; }

message GetRequest {
  bytes key = 1;
  uint64 start_ts = 2;
}

message GetResponse { bytes value = 1; }

message Write {
  bytes key = 1;
  bytes value = 2;
}

message PrewriteRequest {
  Write write = 1;
  bytes primary_key = 2;
  uint64 start_ts = 3;
}

message PrewriteResponse { bool success = 1; }

message CommitRequest {
  bool is_primary = 1;
  bytes key = 2;
  uint64 start_ts = 3;
  uint64 commit_ts = 4;
}

message CommitResponse { bool success = 1; }
