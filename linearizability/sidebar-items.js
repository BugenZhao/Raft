initSidebarItems({"enum":[["EntryKind",""],["Ordering","Atomic memory orderings"],["RecvTimeoutError","This enumeration is the list of possible errors that made `recv_timeout` unable to return data when called. This can occur with both a [`channel`] and a [`sync_channel`]."]],"fn":[["cache_contains",""],["channel","Creates a new asynchronous channel, returning the sender/receiver halves. All data sent on the [`Sender`] will become available on the [`Receiver`] in the same order as it was sent, and no `send` will block the calling thread (this channel has an “infinite buffer”, unlike [`sync_channel`], which will block after its buffer limit is reached). `recv` will block until a message is available while there is at least one [`Sender`] alive (including clones)."],["check_events",""],["check_events_timeout",""],["check_operations",""],["check_operations_timeout",""],["check_single",""],["convert_entries",""],["lift",""],["make_entries",""],["renumber",""],["unlift",""],["wait_res",""]],"macro":[["Debug","Derive macro generating an impl of the trait `Debug`."]],"mod":[["bitset",""],["model",""],["models",""],["thread","Native threads."]],"struct":[["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["AtomicBool","A boolean type which can be safely shared between threads."],["CacheEntry",""],["CallsEntry",""],["Duration","A `Duration` type to represent a span of time, typically used for system timeouts."],["Entry",""],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["LinkedNodes",""],["Node",""],["Rc","A single-threaded reference-counting pointer. ‘Rc’ stands for ‘Reference Counted’."],["Receiver","The receiving half of Rust’s [`channel`] (or [`sync_channel`]) type. This half can only be owned by one thread."],["Ref","Wraps a borrowed reference to a value in a `RefCell` box. A wrapper type for an immutably borrowed value from a `RefCell<T>`."],["RefCell","A mutable memory location with dynamically checked borrow rules"]],"trait":[["Debug","`?` formatting."]],"type":[["LinkNode",""]]});