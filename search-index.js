var searchIndex = JSON.parse('{\
"labcodec":{"doc":"A thin wrapper of prost","t":[6,6,8,5,5],"n":["DecodeError","EncodeError","Message","decode","encode"],"q":["labcodec","","","",""],"d":["A message decoding error.","A message encoding error.","A labcodec message.","Decodes an message from the buffer.","Encodes the message to a <code>Vec&lt;u8&gt;</code>."],"i":[0,0,0,0,0],"f":[null,null,null,[[],["result",4,[["message",8],["decodeerror",6]]]],[[["vec",3]],["result",4,[["encodeerror",6]]]]],"p":[]},\
"labrpc":{"doc":"","t":[3,13,13,4,6,8,3,13,13,6,3,6,8,3,3,13,13,13,10,10,0,12,12,12,0,12,10,12,12,0,12,12,0,12,12,12,0,14,12,12,12,12,12,12,12,3,3,8,10,10,11,11,11,11,11,11,12,11,11,11,12,11,11,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,13,13,4,13,13,6,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,5,11,12,12,12,12,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,6,8,7,6,3,3,3,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,10,12,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Client","Decode","Encode","Error","Handler","HandlerFactory","Network","Other","Recv","Result","Rpc","RpcFuture","RpcHooks","Server","ServerBuilder","Stopped","Timeout","Unimplemented","after_dispatch","before_dispatch","client","client_name","core","core","error","fq_name","handler","hooks","hooks","macros","name","name","network","req","resp","sender","server","service","services","worker","0","0","0","0","0","Client","Rpc","RpcHooks","after_dispatch","before_dispatch","borrow","borrow","borrow_mut","borrow_mut","call","clear_hooks","client_name","clone","clone_into","fmt","fq_name","from","from","hooks","hooks","into","into","name","req","resp","sender","set_hooks","take_resp_sender","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","worker","Decode","Encode","Error","Other","Recv","Result","Stopped","Timeout","Unimplemented","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","ne","source","to_owned","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","EndInfo","Endpoints","Network","NetworkCore","add_server","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connect","connections","core","count","count","create","create_client","delete_server","enable","enabled","enabled","end_info","endpoints","fmt","from","from","from","from","into","into","into","into","is_server_dead","long_delays","long_reordering","long_reordering","new","poller","process_rpc","process_rpc","reliable","reliable","sender","server","server_dead","servers","set_long_delays","set_long_reordering","set_reliable","spawn","spawn_poller","start","to_owned","total_count","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","worker","Handler","HandlerFactory","ID_ALLOC","RpcFuture","Server","ServerBuilder","ServerCore","add_service","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","core","count","count","dispatch","fmt","from","from","from","handler","id","into","into","into","name","name","name","new","services","services","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["labrpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","labrpc::Error","","","","","labrpc::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","labrpc::error","","","","","","","","","","","","","","","","","","","","","","","","","","labrpc::error::Error","","","","","labrpc::network","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","labrpc::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connects a Client to a server. a Client can only be …","","","","","","","","Enable/disable a Client.","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the specified server killed.","","","","","Spawns a future to run on this net framework.","Spawns a future to run on this net framework.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,2,2,0,3,4,5,0,3,6,3,7,0,8,7,0,3,3,7,0,0,8,7,9,10,11,12,13,0,0,0,2,2,3,7,3,7,7,7,3,7,7,3,3,3,7,3,7,3,7,7,3,3,7,7,3,7,3,7,3,7,3,7,3,7,7,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,10,11,12,13,0,0,0,0,4,14,15,16,4,14,15,16,4,4,4,4,14,4,4,15,4,4,4,4,14,16,4,15,16,14,15,16,4,14,15,16,4,4,15,15,16,4,15,0,4,15,16,15,16,0,14,4,4,4,4,4,4,4,4,14,15,16,4,14,15,16,4,14,15,16,4,14,15,16,4,15,0,0,0,0,0,0,0,8,8,17,5,8,17,5,8,5,5,5,5,17,5,5,8,17,5,6,17,8,17,5,5,8,17,8,8,17,5,8,17,5,8,17,5,8,17,5,8,17,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15],["result",6,[["vec",3,[["u8",15]]]]]],["result",6,[["vec",3,[["u8",15]]]]]],[[["str",15]],["result",6]],null,null,null,null,null,null,[[["str",15]],["box",3,[["handler",6]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15],["result",6,[["vec",3,[["u8",15]]]]]],["result",6,[["vec",3,[["u8",15]]]]]],[[["str",15]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]],["rpcfuture",6,[["result",6]]]],[[]],null,[[],["client",3]],[[]],[[["formatter",3]],["result",6]],null,[[]],[[]],null,null,[[]],[[]],null,null,null,null,[[["arc",3,[["rpchooks",8]]]]],[[],["option",4,[["sender",3,[["result",6,[["vec",3,[["u8",15]]]]]]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["error",4]],[[]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["error",4]],["bool",15]],[[],["option",4,[["error",8]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["server",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["network",3]],[[]],[[["str",15],["str",15]]],null,null,[[["str",15]],["usize",15]],null,[[]],[[["string",3]],["client",3]],[[["str",15]]],[[["str",15],["bool",15]]],null,null,[[["str",15]],["endinfo",3]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["str",15],["usize",15]],["bool",15]],null,null,null,[[],["network",3]],null,[[["option",4,[["u64",15]]],["bool",15],["option",4,[["u64",15]]],["rpc",3],["network",3],["server",3]]],[[["rpc",3]]],null,null,null,null,[[["duration",3],["network",3],["str",15],["str",15],["usize",15]]],null,[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[["unboundedreceiver",3,[["rpc",3]]]]],[[]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["str",15],["box",3,[["handlerfactory",8]]]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["server",3]],[[],["server",3]],[[]],null,[[],["usize",15]],null,[[["str",15]],["rpcfuture",6,[["result",6,[["vec",3,[["u8",15]]]]]]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",15]],["box",3,[["handler",6]]]],null,[[]],[[]],[[]],[[],["str",15]],null,null,[[["string",3]],["serverbuilder",3]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[4,"Error"],[8,"RpcHooks"],[3,"Rpc"],[3,"Network"],[3,"Server"],[8,"HandlerFactory"],[3,"Client"],[3,"ServerBuilder"],[13,"Unimplemented"],[13,"Encode"],[13,"Decode"],[13,"Recv"],[13,"Other"],[3,"Endpoints"],[3,"NetworkCore"],[3,"EndInfo"],[3,"ServerCore"]]},\
"linearizability":{"doc":"","t":[13,13,3,3,3,13,3,8,14,13,3,3,4,3,6,3,18,18,18,18,3,4,3,3,4,3,3,13,13,13,18,13,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,12,11,11,11,11,5,11,11,11,11,12,0,0,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,11,11,5,11,11,11,11,11,12,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,6,13,16,8,13,3,6,13,16,13,16,4,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,12,10,11,12,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,3,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,3,6,3,3,3,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,5,5,5,5,11,5,5,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["AcqRel","Acquire","Arc","AtomicBool","CacheEntry","CallEntry","CallsEntry","Debug","Debug","Disconnected","Duration","Entry","EntryKind","HashMap","LinkNode","LinkedNodes","MAX","MICROSECOND","MILLISECOND","NANOSECOND","Node","Ordering","Rc","Receiver","RecvTimeoutError","Ref","RefCell","Relaxed","Release","ReturnEntry","SECOND","SeqCst","Timeout","ZERO","add","add_assign","as_micros","as_millis","as_mut_ptr","as_nanos","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_secs","as_secs_f32","as_secs_f64","assume_init","assume_init","assume_init","assume_init","backtrace","base","bitset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_contains","capacity","cause","channel","check_events","check_events_timeout","check_operations","check_operations_timeout","check_single","checked_add","checked_div","checked_mul","checked_sub","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","compare_and_swap","compare_exchange","compare_exchange_weak","contains_key","convert_entries","decrement_strong_count","decrement_strong_count","default","default","default","default","default","default","deref","deref","deref","description","description","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","downcast","downcast","downgrade","downgrade","drain","drain_filter","drop","drop","drop","entry","entry","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend_one","extend_one","extend_reserve","extend_reserve","fetch_and","fetch_nand","fetch_or","fetch_update","fetch_xor","filter_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_entries","from_iter","from_iter","from_iter","from_micros","from_millis","from_mut","from_nanos","from_raw","from_raw","from_secs","from_secs_f32","from_secs_f64","ge","ge","ge","get","get_key_value","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut_unchecked","get_mut_unchecked","gt","gt","gt","hash","hash","hash","hash","hasher","head","head","id","id","increment_strong_count","increment_strong_count","index","inner","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_iter","into_iter","into_keys","into_raw","into_raw","into_values","is_empty","is_zero","iter","iter","iter_mut","keys","kind","le","le","le","leak","len","len","lift","linearized","load","lt","lt","lt","make_entries","make_mut","make_mut","map","map_split","matched","model","models","mul","mul_assign","mul_f32","mul_f64","nanos","ne","ne","ne","new","new","new","new","new","new","new","new_cyclic","new_cyclic","new_uninit","new_uninit","new_uninit_slice","new_uninit_slice","new_zeroed","new_zeroed","new_zeroed_slice","new_zeroed_slice","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","phantom","phantom","pin","pin","prev","ptr","ptr","ptr_eq","ptr_eq","push_front","raw_entry","raw_entry_mut","recv","recv_deadline","recv_timeout","remove","remove_entry","renumber","replace","replace_with","reserve","retain","saturating_add","saturating_mul","saturating_sub","secs","shrink_to","shrink_to_fit","source","state","state","store","strong_count","strong_count","sub","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","swap","swap","take","thread","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_borrow","try_borrow_mut","try_borrow_unguarded","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_new","try_new","try_new_uninit","try_new_uninit","try_new_zeroed","try_new_zeroed","try_pin","try_recv","try_reserve","try_unwrap","try_unwrap","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_leak","unlift","v","value","value","value","value","values","values_mut","wait_res","weak_count","weak_count","with_capacity","with_capacity_and_hasher","with_hasher","0","Bitset","bitset_index","borrow","borrow_mut","clear","clone","clone_into","equals","from","hash","into","new","popcnt","set","to_owned","try_from","try_into","type_id","CallEvent","Event","EventKind","Events","Input","Input","Model","None","Operation","Operations","Output","Output","ReturnEvent","State","Value","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone_into","equal","finish","fmt","fmt","from","from","from","from","id","init","input","input","into","into","into","into","kind","output","output","partition","partition_event","step","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","0","0","APPEND","GET","KvInput","KvModel","KvOutput","Op","PUT","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","from","from","from","from","init","into","into","into","into","key","op","partition","partition_event","step","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","value","0","0","AccessError","Builder","JoinHandle","LocalKey","Result","Thread","ThreadId","__FastLocalKeyInner","__OsLocalKeyInner","as_pthread_t","as_u64","available_parallelism","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","dtor_state","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","hash","id","inner","inner","inner","into","into","into","into","into","into","into","into","into_pthread_t","is_running","join","marker","name","name","name","ne","new","new","new","os","panicking","park","park_timeout","park_timeout_ms","register_dtor","sleep","sleep_ms","spawn","spawn","spawn_unchecked","stack_size","stack_size","thread","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark","with","yield_now"],"q":["linearizabilitylinearizability::bitset","","","","","","","","","","","","","","","","","","","linearizability::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linearizability::model::Value","","linearizability::models","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linearizability::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","A thread-safe reference-counting pointer. ‘Arc’ stands …","A boolean type which can be safely shared between threads.","","","","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","The <strong>channel</strong>’s sending half has become disconnected, and …","A <code>Duration</code> type to represent a span of time, typically …","","","A hash map implemented with quadratic probing and SIMD …","","","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","","Atomic memory orderings","A single-threaded reference-counting pointer. ‘Rc’ …","The receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …","This enumeration is the list of possible errors that made …","Wraps a borrowed reference to a value in a <code>RefCell</code> box. A …","A mutable memory location with dynamically checked borrow …","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","","The duration of one second.","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","This <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …","A duration of zero time.","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns a mutable pointer to the underlying <code>bool</code>.","Returns the total number of nanoseconds contained by this …","Returns a raw pointer to the underlying data in this cell.","Provides a raw pointer to the data.","Provides a raw pointer to the data.","","","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","Converts to <code>Rc&lt;[T]&gt;</code>.","Converts to <code>Rc&lt;T&gt;</code>.","Converts to <code>Arc&lt;[T]&gt;</code>.","Converts to <code>Arc&lt;T&gt;</code>.","","","","","","","","","","","","","","Immutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","Returns the number of elements the map can hold without …","","Creates a new asynchronous channel, returning the …","","","","","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","Clears the map, removing all key-value pairs. Keeps the …","","","Panics","Copies a <code>Ref</code>.","","","Makes a clone of the <code>Rc</code> pointer.","Makes a clone of the <code>Arc</code> pointer.","","Panics","","","","","","","","Panics","","Comparison for two <code>Rc</code>s.","Comparison for two <code>Arc</code>s.","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the <code>bool</code> if the current value is the …","Returns <code>true</code> if the map contains a value for the specified …","","Decrements the strong reference count on the <code>Rc&lt;T&gt;</code> …","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","Creates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …","Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates an <code>AtomicBool</code> initialized to <code>false</code>.","","Creates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","Attempt to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","Creates a new <code>Weak</code> pointer to this allocation.","Creates a new <code>Weak</code> pointer to this allocation.","Clears the map, returning all key-value pairs as an …","Creates an iterator which uses a closure to determine if …","","Drops the <code>Rc</code>.","Drops the <code>Arc</code>.","Gets the given key’s corresponding entry in the map for …","","","","Panics","","","Equality for two <code>Rc</code>s.","Equality for two <code>Arc</code>s.","","","","","","","Logical “and” with a boolean value.","Logical “nand” with a boolean value.","Logical “or” with a boolean value.","Fetches the value, and applies a function to it that …","Logical “xor” with a boolean value.","Makes a new <code>Ref</code> for an optional component of the borrowed …","Formats the value using the given formatter.","","","","","","","","","","","","","","","","","","","","","","","","Examples","","Converts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.","","","","","","Converts a <code>bool</code> into an <code>AtomicBool</code>.","","","","Converts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>","","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Allocate a reference-counted string slice and copy <code>v</code> into …","Converts a <code>PathBuf</code> into an <code>Rc</code> by moving the <code>PathBuf</code> data …","","Converts an <code>OsString</code> into an Rc&lt;OsStr&gt; without copying or …","Allocate a reference-counted string slice and copy <code>v</code> into …","Converts a <code>CString</code> into an Rc&lt;CStr&gt; without copying or …","Allocate a reference-counted slice and move <code>v</code>’s items …","","Converts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …","","Create a reference-counted pointer from a clone-on-write …","Move a boxed object to a new, reference counted, …","","Converts a <code>CString</code> into an Arc&lt;CStr&gt; without copying or …","Converts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …","","Converts an <code>OsString</code> into an Arc&lt;OsStr&gt; without copying or …","Allocate a reference-counted slice and move <code>v</code>’s items …","Create an atomically reference-counted pointer from a …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts a <code>PathBuf</code> into an <code>Arc</code> by moving the <code>PathBuf</code> data …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","","","Move a boxed object to a new, reference-counted allocation.","Converts a <code>T</code> into an <code>Arc&lt;T&gt;</code>","","","Takes each element in the <code>Iterator</code> and collects it into an …","Takes each element in the <code>Iterator</code> and collects it into an …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Get atomic access to a <code>&amp;mut bool</code>.","Creates a new <code>Duration</code> from the specified number of …","Constructs an <code>Rc&lt;T&gt;</code> from a raw pointer.","Constructs an <code>Arc&lt;T&gt;</code> from a raw pointer.","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Panics","‘Greater than or equal to’ comparison for two <code>Rc</code>s.","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying <code>bool</code>.","Returns a mutable reference into the given <code>Rc</code>, if there are","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference into the given <code>Rc</code>, without any …","Returns a mutable reference into the given <code>Arc</code>, without …","Panics","Greater-than comparison for two <code>Rc</code>s.","Greater-than comparison for two <code>Arc</code>s.","","","","","Returns a reference to the map’s <code>BuildHasher</code>.","","","","","Increments the strong reference count on the <code>Rc&lt;T&gt;</code> …","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Returns a reference to the value corresponding to the …","","Inserts a key-value pair into the map.","","","","","","","","","","","","","","","","","Consumes the <code>RefCell</code>, returning the wrapped value.","Consumes the atomic and returns the contained value.","Creates a consuming iterator, that is, one that moves each …","","Creates a consuming iterator visiting all the keys in …","Consumes the <code>Rc</code>, returning the wrapped pointer.","Consumes the <code>Arc</code>, returning the wrapped pointer.","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","Returns true if this <code>Duration</code> spans no time.","An iterator visiting all key-value pairs in arbitrary …","Returns an iterator that will block waiting for messages, …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all keys in arbitrary order. The …","","Panics","‘Less than or equal to’ comparison for two <code>Rc</code>s.","‘Less than or equal to’ comparison for two <code>Arc</code>s.","Convert into a reference to the underlying data.","","Returns the number of elements in the map.","","","Loads a value from the bool.","Panics","Less-than comparison for two <code>Rc</code>s.","Less-than comparison for two <code>Arc</code>s.","","Makes a mutable reference into the given <code>Rc</code>.","Makes a mutable reference into the given <code>Arc</code>.","Makes a new <code>Ref</code> for a component of the borrowed data.","Splits a <code>Ref</code> into multiple <code>Ref</code>s for different components …","","","","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","","","Inequality for two <code>Rc</code>s.","Inequality for two <code>Arc</code>s.","","Creates an empty <code>HashMap</code>.","Creates a new <code>RefCell</code> containing <code>value</code>.","Creates a new <code>AtomicBool</code>.","Creates a new <code>Duration</code> from the specified number of whole …","Constructs a new <code>Rc&lt;T&gt;</code>.","Constructs a new <code>Arc&lt;T&gt;</code>.","Constructs a new <code>Rc&lt;T&gt;</code> using a weak reference to itself. …","Constructs a new <code>Arc&lt;T&gt;</code> using a weak reference to itself. …","Constructs a new <code>Rc</code> with uninitialized contents.","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new reference-counted slice with …","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new reference-counted slice with …","Constructs a new atomically reference-counted slice with …","","Panics","","Partial comparison for two <code>Rc</code>s.","Partial comparison for two <code>Arc</code>s.","","","Constructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","","","","Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Attempts to wait for a value on this receiver, returning …","Attempts to wait for a value on this receiver, returning …","Attempts to wait for a value on this receiver, returning …","Removes a key from the map, returning the value at the key …","Removes a key from the map, returning the stored key and …","","Replaces the wrapped value with a new one, returning the …","Replaces the wrapped value with a new one computed from <code>f</code>, …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","Stores a value into the bool.","Gets the number of strong (<code>Rc</code>) pointers to this allocation.","Gets the number of strong (<code>Arc</code>) pointers to this …","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","Swaps the wrapped value of <code>self</code> with the wrapped value of …","Stores a value into the bool, returning the previous value.","Takes the wrapped value, leaving <code>Default::default()</code> in its …","Native threads.","","","","","","","","","","","","","Immutably borrows the wrapped value, returning an error if …","Mutably borrows the wrapped value, returning an error if …","Immutably borrows the wrapped value, returning an error if …","","","","","","","","","","","","","","","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","Returns an iterator that will attempt to yield all pending …","Constructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …","Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …","Constructs a new <code>Rc</code> with uninitialized contents, returning …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …","Attempts to return a pending value on this receiver …","Tries to reserve capacity for at least <code>additional</code> more …","Returns the inner value, if the <code>Rc</code> has exactly one strong …","Returns the inner value, if the <code>Arc</code> has exactly one strong …","","","","","","","","","","","","","","","","","Undo the effect of leaked guards on the borrow state of …","","","","","","","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","","Gets the number of <code>Weak</code> pointers to this allocation.","Gets the number of <code>Weak</code> pointers to this allocation.","Creates an empty <code>HashMap</code> with the specified capacity.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error returned by <code>LocalKey::try_with</code>.","Thread factory, which can be used in order to configure …","An owned permission to join on a thread (block on its …","A thread local storage key which owns its contents.","A specialized <code>Result</code> type for threads.","A handle to a thread.","A unique identifier for a running thread.","","","","This returns a numeric identifier for the thread …","Returns an estimate of the default amount of parallelism a …","","","","","","","","","","","","","","","","","","","","","","","Gets a handle to the thread that invokes it.","","","","","","","","","","","","","","","","","","","","","","It is a requirement for the caller to ensure that no …","","Gets the thread’s unique identifier.","","","","","","","","","","","","","Checks if the the associated thread is still running its …","Waits for the associated thread to finish.","","Names the thread-to-be. Currently the name is used for …","Gets the thread’s name.","","","","","Generates the base configuration for spawning a thread, …","","Determines whether the current thread is unwinding because …","Blocks unless or until the current thread’s token is …","Blocks unless or until the current thread’s token is …","Use <code>park_timeout</code>.","","Puts the current thread to sleep for at least the …","Puts the current thread to sleep for at least the …","Spawns a new thread, returning a <code>JoinHandle</code> for it.","Spawns a new thread by taking ownership of the <code>Builder</code>, …","Spawns a new thread without any lifetime restrictions by …","Sets the size of the stack (in bytes) for the new thread.","","Extracts a handle to the underlying thread.","","","","","","","","","","","","","","","","","","","","","Acquires a reference to the value in this TLS key.","","","","","","","","","Atomically makes the handle’s token available if it is …","Acquires a reference to the value in this TLS key.","Cooperatively gives up a timeslice to the OS scheduler."],"i":[1,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,1,1,2,4,1,3,4,4,4,4,4,5,4,6,7,8,7,8,4,4,4,7,7,8,8,8,9,0,2,10,11,12,13,14,9,15,3,6,6,16,5,1,4,7,7,8,8,6,16,2,10,11,12,13,14,9,15,3,6,6,16,5,1,4,7,8,0,9,8,0,0,0,0,0,0,4,4,4,4,9,9,3,6,16,1,4,7,8,9,6,9,3,6,1,4,7,8,6,4,7,8,5,5,5,9,0,7,8,9,6,5,4,7,8,16,7,8,3,8,4,4,4,4,4,4,7,8,7,8,9,9,15,7,8,9,14,9,3,6,1,4,7,8,9,9,9,9,9,9,5,5,5,5,5,16,17,9,15,3,3,6,16,16,5,1,4,7,7,7,8,8,8,2,10,11,12,13,14,9,9,15,3,3,6,6,6,16,5,5,1,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,9,7,8,4,4,5,4,7,8,4,4,4,6,7,8,9,9,9,6,5,7,8,7,8,6,7,8,1,4,7,8,9,11,11,10,12,7,8,9,15,9,2,10,11,12,13,14,9,15,3,6,16,5,1,4,7,8,6,5,9,15,9,7,8,9,9,4,9,15,9,9,10,6,7,8,16,11,9,0,13,5,6,7,8,0,7,8,16,16,12,0,0,4,4,4,4,4,4,7,8,11,9,6,5,4,7,8,7,8,7,8,7,8,7,8,7,8,12,6,4,7,8,7,8,7,8,12,7,8,7,8,11,9,9,15,15,15,9,9,0,6,6,9,9,4,4,4,4,9,9,8,13,14,5,7,8,4,4,4,4,4,4,4,6,5,6,0,10,9,3,6,1,4,7,8,3,16,7,8,6,6,6,2,10,11,12,13,14,9,15,3,6,16,5,1,4,7,7,8,8,4,4,9,2,10,11,12,13,14,9,15,3,6,16,5,1,4,7,8,15,7,8,7,8,7,8,8,15,9,7,8,2,10,11,12,13,14,9,15,3,6,16,5,1,4,7,8,6,0,5,10,12,6,16,9,9,0,7,8,9,9,9,18,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,0,0,0,20,21,0,20,0,0,20,21,19,21,0,19,22,20,23,19,22,20,23,23,23,23,21,23,20,23,19,22,20,23,22,21,20,23,19,22,20,23,22,20,23,21,21,21,23,19,22,20,23,19,22,20,23,19,22,20,23,22,24,25,26,26,0,0,0,0,26,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,29,26,27,28,26,27,28,29,29,26,27,28,29,27,27,29,29,29,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,27,28,30,31,0,0,0,0,0,0,0,0,0,30,31,0,32,33,34,30,35,36,31,37,32,33,34,30,35,36,31,37,35,31,37,35,31,37,0,33,35,31,32,33,34,30,35,35,36,31,37,32,33,34,30,35,36,31,37,33,34,31,37,32,33,37,32,33,34,30,35,36,31,37,30,30,30,34,36,37,36,31,33,34,36,34,0,0,0,0,33,0,0,0,36,36,36,36,30,35,31,37,35,32,33,34,30,35,36,31,37,32,33,34,30,35,36,31,37,32,32,33,34,30,35,36,31,37,37,32,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["duration",3]],["duration",3]],[[["duration",3]]],[[],["u128",15]],[[],["u128",15]],[[]],[[],["u128",15]],[[]],[[["rc",3]]],[[["arc",3]]],[[]],[[]],[[],["u64",15]],[[],["f32",15]],[[],["f64",15]],[[],["rc",3]],[[],["rc",3]],[[],["arc",3]],[[],["arc",3]],[[],["option",4,[["backtrace",3]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["refmut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hashmap",3],["cacheentry",3]],["bool",15]],[[],["usize",15]],[[],["option",4,[["error",8]]]],[[]],[[["model",8],["events",6]],["bool",15]],[[["model",8],["events",6],["duration",3]],["bool",15]],[[["model",8],["operations",6]],["bool",15]],[[["model",8],["operations",6],["duration",3]],["bool",15]],[[["model",8],["linkednodes",3,[["value",4]]],["arc",3,[["atomicbool",3]]]],["bool",15]],[[["duration",3]],["option",4,[["duration",3]]]],[[["u32",15]],["option",4,[["duration",3]]]],[[["u32",15]],["option",4,[["duration",3]]]],[[["duration",3]],["option",4,[["duration",3]]]],[[]],[[],["hashmap",3]],[[],["recvtimeouterror",4]],[[],["refcell",3]],[[["ref",3]],["ref",3]],[[],["ordering",4]],[[],["duration",3]],[[],["rc",3]],[[],["arc",3]],[[["hashmap",3]]],[[["refcell",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["refcell",3]],["ordering",4]],[[["duration",3]],["ordering",4]],[[["rc",3]],["ordering",4]],[[["arc",3]],["ordering",4]],[[["bool",15],["bool",15],["ordering",4]],["bool",15]],[[["bool",15],["bool",15],["ordering",4],["ordering",4]],["result",4,[["bool",15],["bool",15]]]],[[["bool",15],["bool",15],["ordering",4],["ordering",4]],["result",4,[["bool",15],["bool",15]]]],[[],["bool",15]],[[["vec",3,[["event",3]]]],["vec",3,[["entry",3]]]],[[]],[[]],[[],["hashmap",3]],[[],["refcell",3]],[[],["atomicbool",3]],[[],["duration",3]],[[],["rc",3]],[[],["arc",3]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[["u32",15]],["duration",3]],[[["u32",15]]],[[["duration",3]],["f32",15]],[[["duration",3]],["f64",15]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[],["result",4,[["rc",3],["rc",3,[["any",8]]]]]],[[],["result",4,[["arc",3],["arc",3,[["any",8]]]]]],[[["rc",3]],["weak",3]],[[["arc",3]],["weak",3]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[]],[[]],[[],["entry",4]],null,[[["hashmap",3]],["bool",15]],[[["recvtimeouterror",4]],["bool",15]],[[["refcell",3]],["bool",15]],[[["ordering",4]],["bool",15]],[[["duration",3]],["bool",15]],[[["rc",3]],["bool",15]],[[["arc",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["bool",15],["ordering",4]],["bool",15]],[[["bool",15],["ordering",4]],["bool",15]],[[["bool",15],["ordering",4]],["bool",15]],[[["ordering",4],["ordering",4]],["result",4,[["bool",15],["bool",15]]]],[[["bool",15],["ordering",4]],["bool",15]],[[["ref",3]],["result",4,[["ref",3],["ref",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hashmap",3,[["randomstate",3]]]],[[]],[[["recverror",3]],["recvtimeouterror",4]],[[]],[[]],[[],["refcell",3]],[[["never",15]]],[[]],[[["bool",15]],["atomicbool",3]],[[]],[[]],[[]],[[],["rc",3]],[[["never",15]]],[[],["rc",3]],[[["str",15]],["rc",3,[["str",15]]]],[[["pathbuf",3]],["rc",3,[["path",3]]]],[[]],[[["osstring",3]],["rc",3,[["osstr",3]]]],[[["string",3]],["rc",3,[["str",15]]]],[[["cstring",3]],["rc",3,[["cstr",3]]]],[[["vec",3,[["global",3]]]],["rc",3]],[[["cstr",3]],["rc",3,[["cstr",3]]]],[[["path",3]],["rc",3,[["path",3]]]],[[["osstr",3]],["rc",3,[["osstr",3]]]],[[["cow",4]],["rc",3]],[[["box",3,[["global",3]]]],["rc",3]],[[]],[[["cstring",3]],["arc",3,[["cstr",3]]]],[[["path",3]],["arc",3,[["path",3]]]],[[["cstr",3]],["arc",3,[["cstr",3]]]],[[["osstring",3]],["arc",3,[["osstr",3]]]],[[["vec",3,[["global",3]]]],["arc",3]],[[["cow",4]],["arc",3]],[[],["arc",3]],[[["str",15]],["arc",3,[["str",15]]]],[[["pathbuf",3]],["arc",3,[["path",3]]]],[[["string",3]],["arc",3,[["str",15]]]],[[["osstr",3]],["arc",3,[["osstr",3]]]],[[["never",15]]],[[["box",3,[["global",3]]]],["arc",3]],[[],["arc",3]],[[["vec",3,[["entry",3]]]]],[[],["hashmap",3]],[[],["rc",3]],[[],["arc",3]],[[["u64",15]],["duration",3]],[[["u64",15]],["duration",3]],[[["bool",15]],["atomicbool",3]],[[["u64",15]],["duration",3]],[[],["rc",3]],[[],["arc",3]],[[["u64",15]],["duration",3]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[["refcell",3]],["bool",15]],[[["rc",3]],["bool",15]],[[["arc",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["bool",15]],[[["rc",3]],["option",4]],[[["arc",3]],["option",4]],[[["rc",3]]],[[["arc",3]]],[[["refcell",3]],["bool",15]],[[["rc",3]],["bool",15]],[[["arc",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["rc",3,[["refcell",3,[["node",3]]]]]]]],null,null,null,[[]],[[]],[[]],null,[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intokeys",3]],[[["rc",3]]],[[["arc",3]]],[[],["intovalues",3]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["keys",3]],null,[[["refcell",3]],["bool",15]],[[["rc",3]],["bool",15]],[[["arc",3]],["bool",15]],[[["ref",3]]],[[],["usize",15]],[[],["usize",15]],[[["rc",3]]],null,[[["ordering",4]],["bool",15]],[[["refcell",3]],["bool",15]],[[["rc",3]],["bool",15]],[[["arc",3]],["bool",15]],[[["operations",6,[["",26,[["debug",8],["clone",8]]],["",26,[["debug",8],["clone",8]]]]]],["vec",3,[["entry",3,[["value",4,[["",26,[["debug",8],["clone",8]]],["",26,[["debug",8],["clone",8]]]]]]]]]],[[["rc",3]]],[[["arc",3]]],[[["ref",3]],["ref",3]],[[["ref",3]]],null,null,null,[[["u32",15]],["duration",3]],[[["u32",15]]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],null,[[["duration",3]],["bool",15]],[[["rc",3]],["bool",15]],[[["arc",3]],["bool",15]],[[]],[[],["hashmap",3,[["randomstate",3]]]],[[],["refcell",3]],[[["bool",15]],["atomicbool",3]],[[["u64",15],["u32",15]],["duration",3]],[[],["rc",3]],[[],["arc",3]],[[],["rc",3]],[[],["arc",3]],[[],["rc",3,[["maybeuninit",19]]]],[[],["arc",3,[["maybeuninit",19]]]],[[["usize",15]],["rc",3]],[[["usize",15]],["arc",3]],[[],["rc",3,[["maybeuninit",19]]]],[[],["arc",3,[["maybeuninit",19]]]],[[["usize",15]],["rc",3]],[[["usize",15]],["arc",3]],null,[[["refcell",3]],["option",4,[["ordering",4]]]],[[["duration",3]],["option",4,[["ordering",4]]]],[[["rc",3]],["option",4,[["ordering",4]]]],[[["arc",3]],["option",4,[["ordering",4]]]],null,null,[[],["pin",3,[["rc",3]]]],[[],["pin",3,[["arc",3]]]],null,null,null,[[["rc",3],["rc",3]],["bool",15]],[[["arc",3],["arc",3]],["bool",15]],[[["rc",3,[["refcell",3,[["node",3]]]]]]],[[],["rawentrybuilder",3]],[[],["rawentrybuildermut",3]],[[],["result",4,[["recverror",3]]]],[[["instant",3]],["result",4,[["recvtimeouterror",4]]]],[[["duration",3]],["result",4,[["recvtimeouterror",4]]]],[[],["option",4]],[[],["option",4]],[[["vec",3,[["event",3]]]],["vec",3,[["event",3]]]],[[]],[[]],[[["usize",15]]],[[]],[[["duration",3]],["duration",3]],[[["u32",15]],["duration",3]],[[["duration",3]],["duration",3]],null,[[["usize",15]]],[[]],[[],["option",4,[["error",8]]]],null,null,[[["bool",15],["ordering",4]]],[[["rc",3]],["usize",15]],[[["arc",3]],["usize",15]],[[["duration",3]],["duration",3]],[[["duration",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["duration",3]],[[],["duration",3]],[[["refcell",3]]],[[["bool",15],["ordering",4]],["bool",15]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4,[["ref",3],["borrowerror",3]]]],[[],["result",4,[["refmut",3],["borrowmuterror",3]]]],[[],["result",4,[["borrowerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["rc",3]],["result",4,[["rc",3]]]],[[],["result",4]],[[["arc",3]],["result",4,[["arc",3]]]],[[["f32",15]],["result",4,[["duration",3],["fromsecserror",3]]]],[[["f64",15]],["result",4,[["duration",3],["fromsecserror",3]]]],[[],["result",4,[["occupiederror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tryiter",3]],[[],["result",4,[["rc",3],["allocerror",3]]]],[[],["result",4,[["arc",3],["allocerror",3]]]],[[],["result",4,[["rc",3,[["maybeuninit",19]]],["allocerror",3]]]],[[],["result",4,[["arc",3,[["maybeuninit",19]]],["allocerror",3]]]],[[],["result",4,[["rc",3,[["maybeuninit",19]]],["allocerror",3]]]],[[],["result",4,[["arc",3,[["maybeuninit",19]]],["allocerror",3]]]],[[],["result",4,[["pin",3,[["arc",3]]],["allocerror",3]]]],[[],["result",4,[["tryrecverror",4]]]],[[["usize",15]],["result",4,[["tryreserveerror",3]]]],[[["rc",3]],["result",4,[["rc",3]]]],[[["arc",3]],["result",4,[["arc",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["rc",3]]],null,null,null,null,null,[[],["values",3]],[[],["valuesmut",3]],[[["receiver",3,[["bool",15]]],["arc",3,[["atomicbool",3]]],["usize",15],["duration",3]],["bool",15]],[[["rc",3]],["usize",15]],[[["arc",3]],["usize",15]],[[["usize",15]],["hashmap",3,[["randomstate",3]]]],[[["usize",15]],["hashmap",3]],[[],["hashmap",3]],null,null,[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[],["bitset",3]],[[]],[[["bitset",3]],["bool",15]],[[]],[[],["u64",15]],[[]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["operation",3]],[[]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[]],null,[[["operations",6]],["vec",3,[["operations",6]]]],[[["events",6]],["vec",3,[["events",6]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["op",4]],[[],["kvinput",3]],[[],["kvoutput",3]],[[],["kvmodel",3]],[[]],[[]],[[]],[[]],[[],["kvmodel",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["operations",6]],["vec",3,[["operations",6]]]],[[["events",6]],["vec",3,[["events",6]]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[],["nonzerou64",3]],[[],["result",4,[["nonzerousize",3],["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["accesserror",3]],[[],["threadid",3]],[[],["thread",3]],[[]],[[]],[[]],[[],["thread",3]],null,[[["accesserror",3]],["bool",15]],[[["threadid",3]],["bool",15]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["threadid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["bool",15]],[[],["result",4,[["box",3,[["any",8],["global",3]]]]]],null,[[["string",3]],["builder",3]],[[],["option",4,[["str",15]]]],null,[[["threadid",3]],["bool",15]],[[],["key",3]],[[],["key",3]],[[],["builder",3]],null,[[],["bool",15]],[[]],[[["duration",3]]],[[["u32",15]]],[[]],[[["duration",3]]],[[["u32",15]]],[[],["joinhandle",3]],[[],["result",4,[["joinhandle",3],["error",3]]]],[[],["result",4,[["joinhandle",3],["error",3]]]],[[["usize",15]],["builder",3]],null,[[],["thread",3]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["accesserror",3]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[4,"Ordering"],[4,"EntryKind"],[4,"RecvTimeoutError"],[3,"Duration"],[3,"AtomicBool"],[3,"RefCell"],[3,"Rc"],[3,"Arc"],[3,"HashMap"],[3,"Entry"],[3,"LinkedNodes"],[3,"Node"],[3,"CacheEntry"],[3,"CallsEntry"],[3,"Receiver"],[3,"Ref"],[8,"Debug"],[3,"Bitset"],[4,"EventKind"],[4,"Value"],[8,"Model"],[3,"Event"],[3,"Operation"],[13,"Input"],[13,"Output"],[4,"Op"],[3,"KvInput"],[3,"KvOutput"],[3,"KvModel"],[3,"JoinHandle"],[3,"ThreadId"],[3,"LocalKey"],[3,"__FastLocalKeyInner"],[3,"__OsLocalKeyInner"],[3,"AccessError"],[3,"Builder"],[3,"Thread"]],"a":{"available_concurrency":[666],"compare_and_swap":[129,130],"hardware_concurrency":[666],"num_cpus":[666],"{:?}":[7]}},\
"percolator":{"doc":"","t":[3,3,12,11,12,11,11,11,11,0,11,11,11,11,11,11,11,12,11,11,12,14,0,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,17,3,17,3,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,4,13,6,3,13,3,17,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,0,3,8,5,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,11,3,8,5,11,11,12,11,11,10,11,11,10,11,11,11,10,11,11,11,11,11,11,11],"n":["RUNTIME","Runtime","__private_field","block_on","blocking_pool","borrow","borrow","borrow_mut","borrow_mut","client","deref","drop","enter","fmt","from","from","handle","handle","into","into","kind","lazy_static","msg","new","server","service","shutdown_background","shutdown_timeout","spawn","spawn_blocking","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BACKOFF_TIME_MS","Client","RETRY_TIMES","Transcation","back_off","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commit","commit_async","current_txn","from","from","get","get_timestamp","get_timestamp_async","into","into","new","new","set","to_owned","to_owned","try_from","try_from","try_into","try_into","ts","tso_client","txn_client","type_id","type_id","vzip","vzip","writes","CommitRequest","CommitResponse","GetRequest","GetResponse","PrewriteRequest","PrewriteResponse","TimestampRequest","TimestampResponse","Write","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit_ts","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","is_primary","key","key","key","ne","ne","ne","ne","ne","ne","ne","ne","primary_key","start_ts","start_ts","start_ts","success","success","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ts","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","Column","Data","Key","KvTable","Lock","MemoryStorage","TTL","Timestamp","TimestampOracle","Value","Vector","Write","as_bytes","as_ts","back_off_maybe_clean_up_lock","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","column_mut","column_ref","commit","data","data","default","default","default","eq","erase","from","from","from","from","from","get","get_timestamp","into","into","into","into","into","lock","ne","next_ts","prewrite","read","read_owned","to_owned","to_owned","to_owned","to_owned","try_erase_expired","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","write","write","0","0","timestamp","transaction","Client","Service","add_service","borrow","borrow_mut","client","clone","clone_into","from","get_timestamp","get_timestamp","into","new","spawn","to_owned","try_from","try_into","type_id","vzip","Client","Service","add_service","borrow","borrow_mut","client","clone","clone_into","commit","commit","from","get","get","into","new","prewrite","prewrite","spawn","to_owned","try_from","try_into","type_id","vzip"],"q":["percolator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","percolator::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","percolator::msgpercolator::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","percolator::server::Value","","percolator::service","","percolator::service::timestamp","","","","","","","","","","","","","","","","","","","percolator::service::transaction","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The Tokio runtime.","","Runs a future to completion on the Tokio runtime. This is …","Blocking pool handle, used to signal shutdown","","","","","","","","Enters the runtime context.","","","","Returns a handle to the runtime’s spawner.","Handle to runtime, also contains driver handles","","","Task executor","","","Creates a new runtime instance with default configuration …","","","Shuts down the runtime, without waiting for any spawned …","Shuts down the runtime, waiting for at most <code>duration</code> for …","Spawns a future onto the Tokio runtime.","Runs the provided function on an executor dedicated to …","","","","","","","","","","Client mainly has two purposes: One is getting a …","","","","Begins a new transaction.","","","","","","","","","Commits a transaction.","","","","","Gets the value for a given key.","Gets a timestamp from a TSO.","","","","","Creates a new Client.","Sets keys in a buffer until commit timei":[0,0,1,2,2,1,2,1,2,0,1,2,2,2,1,2,2,2,1,2,2,0,0,2,0,0,2,2,2,2,1,2,1,2,1,2,1,2,0,0,0,0,0,3,4,3,4,3,4,3,4,3,3,3,3,4,3,3,3,3,4,3,4,3,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,0,0,0,0,0,0,0,0,0,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,12,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,12,7,9,12,6,7,8,9,10,11,12,13,10,7,10,12,11,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,6,5,6,7,8,9,10,11,12,13,8,9,5,6,7,8,9,10,11,12,13,10,0,14,0,0,14,0,0,15,0,0,15,14,15,15,16,14,17,15,18,16,14,17,15,18,16,17,15,18,16,17,15,18,16,18,18,16,18,16,17,18,16,15,18,14,17,15,18,16,16,17,14,17,15,18,16,18,15,17,16,18,18,17,15,18,16,18,14,17,15,18,16,14,17,15,18,16,14,17,15,18,16,14,17,15,18,16,18,18,19,20,0,0,0,0,0,21,21,21,21,21,21,22,21,21,21,21,21,21,21,21,21,0,0,0,23,23,23,23,23,24,23,23,24,23,23,23,24,23,23,23,23,23,23,23],"f":[null,null,null,[[]],null,[[]],[[]],[[]],[[]],null,[[],["runtime",3]],[[]],[[],["enterguard",3]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[],["handle",3]],null,[[]],[[]],null,null,null,[[],["result",4,[["runtime",3],["error",3]]]],null,null,[[]],[[["duration",3]]],[[],["joinhandle",3]],[[],["joinhandle",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["transcation",3]],[[],["client",3]],[[]],[[]],[[],["result",6,[["bool",15]]]],[[]],null,[[]],[[]],[[["vec",3,[["u8",15]]]],["result",6,[["vec",3,[["u8",15]]]]]],[[],["result",6,[["u64",15]]]],[[]],[[]],[[]],[[["u64",15]]],[[["tsoclient",3],["transactionclient",3]],["client",3]],[[["vec",3,[["u8",15]]],["vec",3,[["u8",15]]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["timestamprequest",3]],[[],["timestampresponse",3]],[[],["getrequest",3]],[[],["getresponse",3]],[[],["write",3]],[[],["prewriterequest",3]],[[],["prewriteresponse",3]],[[],["commitrequest",3]],[[],["commitresponse",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["timestamprequest",3]],["bool",15]],[[["timestampresponse",3]],["bool",15]],[[["getrequest",3]],["bool",15]],[[["getresponse",3]],["bool",15]],[[["write",3]],["bool",15]],[[["prewriterequest",3]],["bool",15]],[[["prewriteresponse",3]],["bool",15]],[[["commitrequest",3]],["bool",15]],[[["commitresponse",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["timestampresponse",3]],["bool",15]],[[["getrequest",3]],["bool",15]],[[["getresponse",3]],["bool",15]],[[["write",3]],["bool",15]],[[["prewriterequest",3]],["bool",15]],[[["prewriteresponse",3]],["bool",15]],[[["commitrequest",3]],["bool",15]],[[["commitresponse",3]],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["u64",15]],[[["vec",3,[["u8",15]]],["u64",15],["value",4],["mutexguard",3,[["kvtable",3]]]],["option",4,[["mutexguard",3,[["kvtable",3]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["timestamporacle",3]],[[],["value",4]],[[],["kvtable",3]],[[],["memorystorage",3]],[[]],[[]],[[]],[[]],[[["column",4]],["btreemap",3]],[[["column",4]],["btreemap",3]],[[["commitrequest",3]],["pin",3,[["box",3,[["future",8]]]]]],null,null,[[],["timestamporacle",3]],[[],["kvtable",3]],[[],["memorystorage",3]],[[["value",4]],["bool",15]],[[["column",4],["u64",15]],["option",4,[["value",4]]]],[[]],[[]],[[]],[[]],[[]],[[["getrequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["timestamprequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[]],[[]],[[]],[[]],null,[[["value",4]],["bool",15]],null,[[["prewriterequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["column",4]],["option",4]],[[["column",4]],["option",4]],[[]],[[]],[[]],[[]],[[["column",4],["u64",15]],["option",4,[["value",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["u8",15]]],["column",4],["u64",15],["value",4]]],null,null,null,null,null,null,null,[[["service",8],["serverbuilder",3]],["result",6]],[[]],[[]],null,[[],["client",3]],[[]],[[]],[[["timestamprequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["timestamprequest",3]],["rpcfuture",6,[["result",6,[["timestampresponse",3]]]]]],[[]],[[["client",3]],["client",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[["service",8],["serverbuilder",3]],["result",6]],[[]],[[]],null,[[],["client",3]],[[]],[[["commitrequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["commitrequest",3]],["rpcfuture",6,[["result",6,[["commitresponse",3]]]]]],[[]],[[["getrequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["getrequest",3]],["rpcfuture",6,[["result",6,[["getresponse",3]]]]]],[[]],[[["client",3]],["client",3]],[[["prewriterequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["prewriterequest",3]],["rpcfuture",6,[["result",6,[["prewriteresponse",3]]]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"RUNTIME"],[3,"Runtime"],[3,"Client"],[3,"Transcation"],[3,"TimestampRequest"],[3,"TimestampResponse"],[3,"GetRequest"],[3,"GetResponse"],[3,"Write"],[3,"PrewriteRequest"],[3,"PrewriteResponse"],[3,"CommitRequest"],[3,"CommitResponse"],[4,"Column"],[4,"Value"],[3,"MemoryStorage"],[3,"TimestampOracle"],[3,"KvTable"],[13,"Timestamp"],[13,"Vector"],[3,"Client"],[8,"Service"],[3,"Client"],[8,"Service"]]},\
"raft":{"doc":"","t":[6,3,12,11,11,11,11,11,0,0,0,11,11,11,11,0,0,0,3,11,11,11,11,11,14,11,11,11,11,11,12,11,12,12,11,11,12,11,11,12,11,11,11,11,4,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,6,6,6,13,3,3,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,14,12,12,11,12,11,11,11,12,11,12,12,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,13,13,3,3,4,13,13,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,3,8,5,11,11,12,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,12,12,0,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,8,5,10,11,11,11,12,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,13,4,13,13,4,17,13,13,3,3,13,13,6,13,3,4,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,12,12,11,0,12,11,11,11,14,12,12,11,11,11,11,11,11,0,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,4,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,3,11,11,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,12,11,11,11,11,13,13,13,3,3,3,3,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12],"n":["Executor","SHARED_EXECUTOR","__private_field","borrow","borrow_mut","deref","from","into","kvraft","proto","raft","try_from","try_into","type_id","vzip","client","errors","server","Clerk","append","append_async","borrow","borrow_mut","call","clog","cycle_servers","fmt","from","get","get_async","id","into","last_leader","name","new","next_seq","next_seq","put","put_async","servers","try_from","try_into","type_id","vzip","Error","NoLeader","Raft","Result","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","ne","source","to_owned","to_string","try_from","try_into","type_id","vzip","0","ClerkId","Command","CommandIndex","Get","KvServer","Node","Notifier","NotifyReply","PersistentState","PutAppend","apply","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","executor","fmt","from","from","from","from","from","get_state","into","into","into","into","into","is_leader","kill","kv","kvlog","max_raft_state","max_seqs","may_snapshot","me","new","new","new","notifiers","op","p","raft","sender","serialize","start","start_applier","store","term","term","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","value","kvraftpb","raftpb","Append","Get","KvReply","KvRequest","Op","Put","Unknown","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","default","encoded_len","encoded_len","eq","eq","eq","err","fmt","fmt","fmt","from","from","from","from_i32","hash","into","into","into","is_valid","key","kv","ne","ne","op","op","partial_cmp","seq","set_op","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","value","vzip","vzip","vzip","wrong_leader","Client","Service","add_service","borrow","borrow_mut","client","clone","clone_into","from","into","new","op","op","spawn","to_owned","try_from","try_into","type_id","vzip","AppendEntriesArgs","AppendEntriesReply","Entry","InstallSnapshotArgs","InstallSnapshotReply","RequestVoteArgs","RequestVoteReply","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","candidate_id","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conflict_index","data","data","default","default","default","default","default","default","default","deserialize","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","entries","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","last_included_index","last_included_term","last_log_index","last_log_term","leader_commit_index","leader_id","leader_id","ne","ne","ne","ne","ne","ne","ne","prev_log_index","prev_log_term","raft","serialize","success","term","term","term","term","term","term","term","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vote_granted","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Client","Service","add_service","append_entries","append_entries","borrow","borrow_mut","client","clone","clone_into","from","install_snapshot","install_snapshot","into","new","request_vote","request_vote","spawn","to_owned","try_from","try_into","type_id","vzip","AppendEntriesReply","ApplyMsg","Command","ElectionTimeout","Event","HEART_BEAT_MILLIS","HeartBeat","InstallSnapshotReply","Node","Raft","RequestVoteReply","ResetTimeout","RpcResult","Snapshot","State","TimerAction","append_entries","append_entries_args","apply_tx","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commit_and_apply_up_to","cond_install_peer_snapshot","cond_install_snapshot","errors","event_loop_tx","event_loop_tx","event_loop_tx","executor","executor","fmt","fmt","fmt","from","from","from","from","from","get_state","handle_append_entries_reply","handle_append_entries_request","handle_election_timeout","handle_event","handle_heart_beat","handle_install_snapshot_reply","handle_install_snapshot_request","handle_request_vote_reply","handle_request_vote_request","heart_beat_sync_log","install_snapshot","install_snapshot","install_snapshot_args","into","into","into","into","into","is_leader","is_leader","kill","leader_try_commit","log_size","me","new","new","other_peers","p","peers","persist","persister","raft","request_vote","request_vote_args","reset_timeout","rlog","role","shutdown_tx","snapshot","start","start","start_event_loop","start_new_election","start_timer","states","term","term","timer_action_tx","timer_action_tx","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","turn","turn_candidate","turn_follower","turn_leader","type_id","type_id","type_id","type_id","type_id","update_term","v","vzip","vzip","vzip","vzip","vzip","command","index","index","snapshot","term","from","from","from","is_heart_beat","new_next_index","new_next_index","reply","reply","reply","Decode","Encode","Error","NotLeader","Result","Rpc","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","ne","source","to_owned","to_string","try_from","try_into","type_id","vzip","0","0","0","Persister","SimplePersister","borrow","borrow_mut","default","from","into","new","raft_state","raft_state","raft_state_size","raft_state_size","save_raft_state","save_raft_state","save_state_and_snapshot","save_state_and_snapshot","snapshot","snapshot","snapshot_size","snapshot_size","states","try_from","try_into","type_id","vzip","Candidate","Follower","Leader","Log","PersistentState","PersistentStateGuard","PersistentStateWrapper","RoleState","State","VolatileState","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commit_index","compact_to","current_term","data_at","default","deref","deref","deref_mut","deserialize","deserialize","do_persist","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","in_snapshot_len","inner","inner","into","into","into","into","into","into","into","is_leader","is_leader","last_applied","last_index","last_term","log","log_size","new","new","new","new","next_index","offset_index","on_drop","persist","persister","pop_back","push","read","replace","serialize","serialize","snapshot_last_included_index","snapshot_last_included_term","snapshot_last_included_term","start_at","state","term","term","term_at","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","voted_for","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","match_index","next_index","votes"],"q":["raft","","","","","","","","","","","","","","","raft::kvraft","","","raft::kvraft::client","","","","","","","","","","","","","","","","","","","","","","","","","","raft::kvraft::errors","","","","","","","","","","","","","","","","","","","","","raft::kvraft::errors::Error","raft::kvraft::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","raft::kvraft::server::NotifyReply","raft::proto","","raft::proto::kvraftpb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","raft::proto::kvraftpb::kv","","","","","","","","","","","","","","","","","","","raft::proto::raftpb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","raft::proto::raftpb::raft","","","","","","","","","","","","","","","","","","","","","","","raft::raft","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","raft::raft::ApplyMsg","","","","","raft::raft::Event","","","","","","","","","raft::raft::errors","","","","","","","","","","","","","","","","","","","","","","","raft::raft::errors::Error","","","raft::raft::persister","","","","","","","","","","","","","","","","","","","","","","","","","raft::raft::states","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","raft::raft::states::RoleState","",""],"d":["","","","","","","","","","","","","","","","","","","A key-value clerk.","Append the <code>value</code> to the entry for <code>key</code>. Will do insertion …","Async version of <code>append</code> request.","","","Call servers for given <code>args</code> repeatedly until success.","Macro for logging message combined with state and command …","An infinite iterator of all servers, start from <code>last_leader</code>…","","","fetch the current value for a key. returns “” if the …","Async version of <code>get</code> request.","","","Index of the last remembered leader in <code>servers</code>.","","","Get the next sequence number and increase it.","Sequence number for next request.","Put a key-value pair into kv servers.","Async version of <code>put</code> request.","All accessible kv servers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A key-value server.","Key-value service which triggers command starting and …","Notifier for applied requests.","Reply for notifier.","State of a key-value server that should be included in the …","","Raft wants to apply a new command (request) or snapshot.","","","","","","","","","","","","","","","","","Thread pool executor shared with inner Raft instance.","","","","","","","","","","","","","Whether this peer believes it is the leader.","the tester calls kill() when a KVServer instance won’t …","Inner server instance","Macro for logging message combined with state of the kv …","snapshot if log grows this big","Sequence number of the latest applied request for each …","Check the log size and decide whether to ask Raft to …","Same as <code>raft.me</code>.","Create an instance of <code>KvServer</code>, returns the instance and …","","Create a service with inner server and a receiver for …","Notifiers for each under-processing request.","RPC service handler for <code>Op</code>.","States that will be persisted into snapshots.","Underlying Raft node.","","","Send and start a command to Raft layer.","Spawn the main loop for kv server. Will poll applied …","Simple hash-based kv storage.","The current term of this peer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","You’ll have to add definitions here.","","","","","","","","","","","","","","","","","","","","","","","","","Converts an <code>i32</code> to a <code>Op</code>, or <code>None</code> if <code>value</code> is not a valid …","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>Op</code>.","","","","","Returns the enum value of <code>op</code>, or the default if the field …","","","","Sets <code>op</code> to the provided enum value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Your data here (2A, 2B).","Your data here (2A).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message sent to the service.","Ask service to apply this command.","","Event run by a Raft peer in a event loop.","Raft peer heart beat interval in millis, should not be too …","","","Raft service which triggers event loop, timer and RPC …","A single Raft peer.","","","","Ask service to install this snapshot.","State of a raft peer (for testing).","Action for Raft peer to control the timer.","RPC service handler for <code>AppendEntries</code>.","Make arguments for <code>AppendEntries</code> RPC by the index where …","Apply commands to the application.","","","","","","","","","","","","","Update <code>commit_index</code> and commit (and apply) all log entries …","Service want Raft peer to conditionally install snapshot …","A service wants to switch to snapshot.  Only do so if Raft …","","Get a ref to <code>event_loop_tx</code>.","Commit event to handle asynchronously, should always be …","Commit event to handle asynchronously, used by timer","Shared thread pool executor for background RPC requests.","Thread pool executor shared with inner Raft instance.","","","","","","","","","The current state of this peer.","Reply from our prior <code>AppendEntries</code> RPC request.","RPC request for <code>AppendEntries</code>.","Election timeout. Will turn to candidate and start new …","Entrypoint for handling event received from the event loop.","Heart beat. Sync log if we are leader.","Reply from our prior <code>InstallSnapshot</code> RPC request.","RPC request for <code>InstallSnapshot</code>.","Reply from our prior <code>RequestVote</code> RPC request.","RPC request for <code>RequestVote</code>.","Sync log by appending entries OR installing snapshot to …","Compact the log and set <code>commit_index</code> up to the last index …","RPC service handler for <code>InstallSnapshot</code>.","Make arguments for <code>InstallSnapshot</code> RPC.","","","","","","Whether this peer believes it is the leader.","","the tester calls kill() when a Raft instance won’t be …","Try to traverse leader’s <code>start_index</code>s to find new …","Size of persisted log.","This peer’s index into peers[].","the service or tester wants to create a Raft server. the …","Create a new raft service.","Enumerated peers except <code>me</code>.","Persistent state: <code>current_form</code>, <code>voted_for</code>, <code>log</code>.","RPC end points of all peers.","save Raft’s persistent state to stable storage, where it …","Support for Raft and kvraft to save persistent Raft state …","Inner Raft instance.","RPC service handler for <code>RequestVote</code>.","Make arguments for <code>RequestVote</code> RPC.","Tell timer to reset the election timeout.","Macro for logging message combined with state of the Raft …","Role of this peer with its specific states.","Notify the event loop to shutdown","the service says it has created a snapshot that has all …","The service using Raft (e.g. a k/v server) wants to start …","the service using Raft (e.g. a k/v server) wants to start …","Main event loop for the Raft state machine. Receive events …","Start a new election by requesting votes from all other …","Timer task for the Raft state machine: election timeout …","","The current term of this peer.","","Get a ref to <code>timer_action_tx</code>.","Commit timer action to handle asynchronously, like to …","","","","","","","","","","","","Turn to new <code>role</code>.","Turn to candidate, with 1 votes from ourself.","Turn to follower.","Turn to leader, with reinitialized leader states.","","","","","","Update current term and clear <code>voted_for</code> state. WILL NOT …","Volatile state: <code>commit_index</code>, <code>last_applied</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents the log of a Raft peer, with snapshot support.","Persistent state of a raft peer.","Write guard for wrapped <code>PersistentState</code>, will persisted …","Wrapper of <code>PersistentState</code> for persistence purpose.","Role of a peer with its specific states.","State of a raft peer (for testing).","Volatile state of a raft peer.","","","","","","","","","","","","","","","","","","Compact the log to the given index. This method is often …","","Get the data of the entry at given index.","","","","","","","Do persist using <code>persister</code>.","","","","","","","","","restore previously persisted state.","","","","","","","Get the ref to the entry at given index.","Length of entries in snapshot (i.e., not in <code>inner</code>).","","In memory log entries.","","","","","","","","Whether this peer believes it is the leader.","","","Index of the last entry.","Term of the last entry.","","","","Creates an empty log.","","","Index of the next entry slot.","Convert an absolute index into <code>inner</code>’s index","","save Raft’s persistent state to stable storage, where it …","Object to serialize and deserialize this peer’s …","Pop the last entry in log.","Push an entry to the log.","Get a immutable reference to the state.","","","","Index of the last entry in snapshot.","Term of the last entry in snapshot.","Term of the last entry in snapshot.","Get an iterator of log starting at the given index.","The inner state.","The current term of this peer.","","Get the term of the entry at given index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Acquire a write guard for wrapped <code>PersistentState</code>, and …","","","Received votes from peers."],"i":[0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,5,0,0,0,0,0,5,6,7,6,5,8,9,7,6,5,8,9,5,9,5,9,8,8,9,5,7,6,5,8,9,9,7,6,5,8,9,9,9,9,0,6,8,6,6,6,8,9,6,9,6,6,7,8,6,9,8,9,7,5,9,7,6,5,8,9,7,6,5,8,9,7,6,5,8,9,7,6,5,8,9,10,0,0,11,11,0,0,0,11,11,12,13,11,12,13,11,12,12,13,12,13,11,12,13,11,11,12,13,11,12,13,12,13,11,13,12,13,11,12,13,11,11,11,12,13,11,11,12,0,12,13,12,12,11,12,12,12,13,11,12,13,11,12,13,11,12,13,11,12,13,12,13,11,13,0,0,0,14,14,14,14,14,14,14,14,15,14,14,14,14,14,14,14,0,0,0,0,0,0,0,16,17,18,19,20,21,22,16,17,18,19,20,21,22,17,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,20,16,21,16,17,18,19,20,21,22,16,16,17,18,19,20,21,22,19,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,21,21,17,17,19,19,21,16,17,18,19,20,21,22,19,19,0,16,20,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,18,16,17,18,19,20,21,22,0,0,0,23,24,24,24,24,24,24,24,23,24,24,24,23,24,24,24,24,24,24,24,25,0,26,25,0,0,25,25,0,0,25,27,0,26,0,0,28,29,29,29,26,25,27,28,29,26,25,27,28,28,28,29,29,28,0,29,29,28,29,28,26,25,27,29,26,25,27,28,28,29,29,29,29,29,29,29,29,29,29,29,28,29,29,26,25,27,28,28,30,28,29,28,29,29,28,29,29,29,29,0,28,28,29,29,0,29,28,28,29,28,28,29,28,0,28,30,29,29,28,29,26,25,27,28,29,26,25,27,28,29,29,29,29,29,26,25,27,28,29,29,29,26,25,27,28,31,31,32,32,32,33,34,35,34,34,35,33,34,35,36,36,0,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,38,39,0,0,40,40,40,40,40,40,41,40,41,40,41,40,41,40,41,40,41,40,40,40,40,40,40,42,42,42,0,0,0,0,0,0,0,43,44,30,42,45,46,47,43,44,30,42,45,46,47,30,30,47,45,46,45,30,43,44,43,45,46,44,43,30,42,42,45,46,47,43,44,44,30,42,45,46,47,45,45,43,45,43,44,30,42,45,46,47,30,30,47,45,45,46,44,43,45,46,47,45,45,43,44,44,45,45,44,45,45,46,45,45,45,45,44,30,30,45,30,42,43,44,30,42,45,46,47,43,44,30,42,45,46,47,43,44,30,42,45,46,47,46,43,44,30,42,45,46,47,44,48,48,49],"f":[null,null,null,[[]],[[]],[[],["executor",6]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[["string",3],["string",3]]],[[["string",3],["string",3]]],[[]],[[]],[[["kvrequest",3]]],null,[[]],[[["formatter",3]],["result",6]],[[]],[[["string",3]],["string",3]],[[["string",3]]],null,[[]],null,null,[[["string",3],["vec",3,[["kvclient",3]]]],["clerk",3]],[[],["u64",15]],null,[[["string",3],["string",3]]],[[["string",3],["string",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[],["error",4]],[[]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["error",4]],["bool",15]],[[],["option",4,[["error",8]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["applymsg",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["notifyreply",4]],[[],["node",3]],[[]],[[]],[[],["persistentstate",3]],[[],["result",4]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["state",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],null,null,null,null,[[["u64",15]]],null,[[["vec",3,[["raftclient",3]]],["usize",15],["box",3,[["persister",8]]],["option",4,[["usize",15]]]]],[[]],[[["kvserver",3],["unboundedreceiver",3,[["applymsg",4]]]],["node",3]],null,[[["kvrequest",3]],["pin",3,[["box",3,[["future",8]]]]]],null,null,null,[[],["result",4]],[[["kvrequest",3]],["result",6,[["receiver",3,[["notifyreply",4]]]]]],[[["unboundedreceiver",3,[["applymsg",4]]]]],null,[[],["u64",15]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["kvrequest",3]],[[],["kvreply",3]],[[],["op",4]],[[]],[[]],[[]],[[["op",4]],["ordering",4]],[[]],[[]],[[],["op",4]],[[],["usize",15]],[[],["usize",15]],[[["kvrequest",3]],["bool",15]],[[["kvreply",3]],["bool",15]],[[["op",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["i32",15]],["option",4,[["op",4]]]],[[]],[[]],[[]],[[]],[[["i32",15]],["bool",15]],null,null,[[["kvrequest",3]],["bool",15]],[[["kvreply",3]],["bool",15]],[[],["op",4]],null,[[["op",4]],["option",4,[["ordering",4]]]],null,[[["op",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],null,null,null,[[["service",8],["serverbuilder",3]],["result",6]],[[]],[[]],null,[[],["client",3]],[[]],[[]],[[]],[[["client",3]],["client",3]],[[["kvrequest",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["kvrequest",3]],["rpcfuture",6,[["result",6,[["kvreply",3]]]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entry",3]],[[],["requestvoteargs",3]],[[],["requestvotereply",3]],[[],["appendentriesargs",3]],[[],["appendentriesreply",3]],[[],["installsnapshotargs",3]],[[],["installsnapshotreply",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["entry",3]],["bool",15]],[[["requestvoteargs",3]],["bool",15]],[[["requestvotereply",3]],["bool",15]],[[["appendentriesargs",3]],["bool",15]],[[["appendentriesreply",3]],["bool",15]],[[["installsnapshotargs",3]],["bool",15]],[[["installsnapshotreply",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["entry",3]],["bool",15]],[[["requestvoteargs",3]],["bool",15]],[[["requestvotereply",3]],["bool",15]],[[["appendentriesargs",3]],["bool",15]],[[["appendentriesreply",3]],["bool",15]],[[["installsnapshotargs",3]],["bool",15]],[[["installsnapshotreply",3]],["bool",15]],null,null,null,[[],["result",4]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["service",8],["serverbuilder",3]],["result",6]],[[["appendentriesargs",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["appendentriesargs",3]],["rpcfuture",6,[["result",6,[["appendentriesreply",3]]]]]],[[]],[[]],null,[[],["client",3]],[[]],[[]],[[["installsnapshotargs",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["installsnapshotargs",3]],["rpcfuture",6,[["result",6,[["installsnapshotreply",3]]]]]],[[]],[[["client",3]],["client",3]],[[["requestvoteargs",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["requestvoteargs",3]],["rpcfuture",6,[["result",6,[["requestvotereply",3]]]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["appendentriesargs",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["usize",15]],["option",4,[["appendentriesargs",3]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["node",3]],[[]],[[["usize",15]]],[[["u64",15],["usize",15],["vec",3,[["u8",15]]]],["bool",15]],[[["u64",15],["u64",15],["vec",3,[["u8",15]]]],["bool",15]],null,[[],["unboundedsender",3]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["state",3]],[[["usize",15],["result",6,[["appendentriesreply",3]]],["usize",15]]],[[["appendentriesargs",3]],["result",6,[["appendentriesreply",3]]]],[[]],[[["event",4]]],[[]],[[["usize",15],["result",6,[["installsnapshotreply",3]]],["usize",15]]],[[["installsnapshotargs",3]],["result",6,[["installsnapshotreply",3]]]],[[["usize",15],["result",6,[["requestvotereply",3]]]]],[[["requestvoteargs",3]],["result",6,[["requestvotereply",3]]]],[[]],[[["bool",15],["usize",15],["u64",15],["vec",3,[["u8",15]]]],["bool",15]],[[["installsnapshotargs",3]],["pin",3,[["box",3,[["future",8]]]]]],[[],["installsnapshotargs",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[],["usize",15]],null,[[["vec",3,[["raftclient",3]]],["usize",15],["box",3,[["persister",8]]],["unboundedsender",3,[["applymsg",4]]]],["raft",3]],[[["raft",3]],["node",3]],[[]],null,null,[[["option",4,[["vec",3,[["u8",15]]]]]]],null,null,[[["requestvoteargs",3]],["pin",3,[["box",3,[["future",8]]]]]],[[],["requestvoteargs",3]],[[]],null,null,null,[[["u64",15],["vec",3,[["u8",15]]]]],[[],["result",6]],[[],["result",6]],[[["unboundedreceiver",3,[["event",4]]],["receiver",3]]],[[]],[[["unboundedreceiver",3,[["timeraction",4]]]]],null,[[],["u64",15]],null,[[],["unboundedsender",3]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["rolestate",4]]],[[]],[[]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["error",4]],[[]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["error",4]],["bool",15]],[[],["option",4,[["error",8]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[],["simplepersister",3]],[[]],[[]],[[],["simplepersister",3]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["u8",15]]]],[[],["usize",15]],[[],["usize",15]],[[["vec",3,[["u8",15]]]]],[[["vec",3,[["u8",15]]]]],[[["vec",3,[["u8",15]]],["vec",3,[["u8",15]]]]],[[["vec",3,[["u8",15]]],["vec",3,[["u8",15]]]]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["u8",15]]]],[[],["usize",15]],[[],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["state",3]],[[]],null,[[["usize",15],["u64",15]],["bool",15]],null,[[["usize",15]],["option",4,[["vec",3]]]],[[],["state",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["persistentstate",3],["option",4,[["vec",3,[["u8",15]]]]]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["box",3,[["persister",8]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["option",4,[["entry",3]]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,[[],["usize",15]],[[],["u64",15]],null,[[],["usize",15]],[[["persistentstate",3],["arc",3,[["persister",8]]]]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["option",4,[["usize",15]]]],null,[[["option",4,[["vec",3,[["u8",15]]]]]]],null,[[],["option",4,[["entry",3]]]],[[["entry",3]]],[[],["persistentstate",3]],[[["usize",15],["entry",3]],["option",4,[["entry",3]]]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[],["u64",15]],null,[[["usize",15]],["option",4]],null,[[],["u64",15]],null,[[["usize",15]],["option",4,[["u64",15]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["persistentstateguard",3]],null,null,null],"p":[[3,"SHARED_EXECUTOR"],[3,"Clerk"],[4,"Error"],[13,"Raft"],[4,"NotifyReply"],[3,"KvServer"],[3,"Notifier"],[3,"PersistentState"],[3,"Node"],[13,"Get"],[4,"Op"],[3,"KvRequest"],[3,"KvReply"],[3,"Client"],[8,"Service"],[3,"Entry"],[3,"RequestVoteArgs"],[3,"RequestVoteReply"],[3,"AppendEntriesArgs"],[3,"AppendEntriesReply"],[3,"InstallSnapshotArgs"],[3,"InstallSnapshotReply"],[8,"Service"],[3,"Client"],[4,"Event"],[4,"ApplyMsg"],[4,"TimerAction"],[3,"Node"],[3,"Raft"],[3,"State"],[13,"Command"],[13,"Snapshot"],[13,"RequestVoteReply"],[13,"AppendEntriesReply"],[13,"InstallSnapshotReply"],[4,"Error"],[13,"Encode"],[13,"Decode"],[13,"Rpc"],[3,"SimplePersister"],[8,"Persister"],[4,"RoleState"],[3,"PersistentStateGuard"],[3,"PersistentStateWrapper"],[3,"Log"],[3,"PersistentState"],[3,"VolatileState"],[13,"Leader"],[13,"Candidate"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};